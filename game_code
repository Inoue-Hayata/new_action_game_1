import pygame
from pygame.locals import *
import sys
import random
import copy

class Player():
    def __init__(self):
        self.pos = {'x':0, 'y':340}
        self.size = {'x':40, 'y':40}
        self.vel = {'x':0, 'y':0}
        self.jump_power = -4.0
        self.zone = 0   # 0が通常、1が編集モード、2がgame over画面、3が23ステージクリア画面
        self.no_control = 0
        self.flash = 0  # 0が通常、1が敵と当たった時、2が編集モード、3が自爆
        self.flash_count = 0
    def show(self, screen):
        if self.zone != 1:  # 編集モード以外
            if self.flash == 0 or (self.flash == 1 or self.flash == 3) and self.flash_count//10%2 == 1:
                pygame.draw.rect(screen, (255,255,0), (self.pos['x'],self.pos['y'],self.size['x'],self.size['y']),0)    # プレイヤーの中身
        else:               # 編集モード内
            if self.flash == 0 or (self.flash == 1 or self.flash == 2) and self.flash_count//10%2 == 1:
                zone_1_rect = pygame.Surface((self.size['x'], self.size['y']), pygame.SRCALPHA) # 四角形のためのサーフェス(zone_1_rect)を作成
                pygame.draw.rect(zone_1_rect, (255,255,0,150), zone_1_rect.get_rect())  # サーフェス(zone_1_rect)上に黄色い四角形を描画
                zone_1_rect.set_alpha(150)  # サーフェス(zone_1_rect)全体の透明度を設定
                screen.blit(zone_1_rect, (self.pos['x'], self.pos['y']))    # (半透明の)四角形(zone_1_rect)をサーフェス(screen)に描画
        if self.flash == 0 or (self.flash == 1 or self.flash == 2 or self.flash == 3) and self.flash_count//10%2 == 1:
            pygame.draw.rect(screen, (0,0,0), (self.pos['x'],self.pos['y'],self.size['x'],self.size['y']),1)    # プレイヤーの枠線
    def move(self,vel_x,vel_y):
        if self.flash == 0:
            self.flash_count = 0
        if self.flash == 1 or self.flash == 3:
            self.flash_count += 1
            if self.flash_count >= (100 if Ifm.lives >= 2 else 300):
                self.flash = 0
                P1.pos['x'] = 0
                P1.pos['y'] = 340
                P1.vel['x'] = 0
                P1.vel['y'] = 0
                P1.size['x'] = St.stage_element[St.st_num-1][0]
                P1.size['y'] = St.stage_element[St.st_num-1][1]
                if P1.zone != 2 or P1.zone == 2 and Ifm.lives == 1:
                    Ifm.lives -= 1
                    global Ifm_txt_lives
                    Ifm_txt_lives = font1.render("残りライフ："+str(Ifm.lives), True, (0, 0, 0))
                if Ifm.lives <= 0:
                    self.zone = 2
        if self.flash == 2:
            self.flash_count += 1
        
        if self.flash != 1 and self.flash != 3:
            self.vel['x'] = vel_x
            self.pos['x'] += self.vel['x']
            if 0 >= self.pos['x']:
                self.vel['x'] = 0
                self.pos['x'] = 0
            if 800-self.size['x'] <= self.pos['x']:
                self.vel['x'] = 0
                self.pos['x'] = 800-self.size['x']

            if self.zone == 0 or self.zone == 3:
                if St.next == 0:
                    self.vel['y'] += vel_y + 0.08
                    self.pos['y'] += self.vel['y']
                    # 天井・床の判定
                    for i in range(int(((P1.pos['x']+P1.size['x'])/40-1 if (P1.pos['x']+P1.size['x'])%40 == 0 else (P1.pos['x']+P1.size['x'])//40) - P1.pos['x']//40 + 1)):
                        if P1.pos['y'] < 120+St.ground_list[int(P1.pos['x']//40)+i]*40:
                            P1.vel['y'] = 0
                            P1.pos['y'] = 120+St.ground_list[int(P1.pos['x']//40)+i]*40
                        if P1.pos['y']+P1.size['y'] > 400+St.ground_list[int(P1.pos['x']//40)+i]*40:
                            P1.vel['y'] = 0
                            P1.pos['y'] = 400+St.ground_list[int(P1.pos['x']//40)+i]*40 - P1.size['y']

class stage():
    def __init__(self):
        self.ground_list = []
        for i in range(20):
            self.ground_list.append(0)
        self.goal_pos = {'x':720, 'y':40}
        self.goal_size = {'x':40, 'y':80}
        self.st_num = 1
        self.next = 0
        self.start_text = 1
        self.block_enemy = 0    # 1基本ブロック敵 2デカ敵 4動くチビ敵 8不規則に動く極チビ敵 16動く先を表示してから時間差で動く敵
        self.b_enemy0_pos = [[240,280],[440,220],[300,340],[780,0],[740,0]] # 固定(初期値)
        self.b_enemy0_size = [40,100,30,20,60] # 固定(初期値)
        self.b_enemy0_vel = [[0,0],[0,0],[3,3],[1,1],[0,0]] # 固定(初期値)
        self.b_enemy1_pos = [[240,280],[440,220],[300,340],[780,0],[740,0]]
        self.b_enemy1_size = [40,100,30,20,60]
        self.b_enemy1_vel = [[0,0],[0,0],[3,3],[1,1],[0,0]]
        self.e_5_TimeCount = 0
        self.e_5_TestX = 0
        self.e_5_TestY = 0
        self.coin_num = 0   # コインの個数
        self.coin_pos = []
        self.coin_size = [32,40]   # 今のところ変更なし
        self.coin_count = 0
        self.mouse_on_up_arrow = 0
        self.mouse_on_down_arrow = 0
        self.stage_element = [[40,40,-4.0,5,0,720,40,40,80,0,0], [40,40,-3.5,5,1,720,40,40,80,0,0], [40,40,-4.0,5,2,720,40,40,80,0,0], [40,40,-4.0,5,3,720,40,40,80,0,0], 
                              [40,40,-4.0,5,4,720,40,40,80,0,0], [40,40,-4.0,5,5,720,40,40,80,0,0], [40,40,-4.0,5,6,720,40,40,80,0,0], [40,40,-4.0,5,7,720,40,40,80,0,0], 
                              [40,40,-4.0,5,8,720,40,40,80,0,0], [40,40,-4.0,5,0,720,40,40,80,800,5], [30,30,-3.0,5,6,720,40,40,80,1000,7], [50,50,-3.0,5,10,720,40,40,80,0,0], 
                              [40,40,-3.0,5,12,720,40,40,80,0,0], [40,40,-4.0,5,13,720,40,40,80,1000,5], [40,40,-3.0,5,16,720,40,40,80,0,0], [20,20,-3.0,3,12,720,40,40,60,1000,5], 
                              [15,15,-3.0,10,28,720,40,40,50,1000,10], [40,40,-3.0,5,12,720,40,40,80,300,5], [40,40,-3.0,5,20,720,40,40,80,100,3], [40,40,-3.0,10,24,720,40,40,80,1000,3], 
                              [40,40,-3.0,10,28,720,40,40,80,400,5], [30,30,-3.0,8,28,720,40,20,40,1000,10], [40,40,-3.0,7,28,720,40,15,30,1000,15],]
                            # P1SizeX, P1SizeY, P1JumpPower, IfmLives, St_b_enemy, StGoalPosX, StGoalPosY, StGoalSizeX, StGoalSizeY, StGoalGap, StCoinNum
    def St_main(self,screen):
        self.show(screen)
        if P1.flash == 0:
            if Menu.show_YN == 0:
                self.b_enemy_move()
        if P1.zone == 0:
            if self.block_enemy != 0:
                for i in range(1,len(format(self.block_enemy, 'b'))+1):
                    if int(str(format(self.block_enemy, 'b'))[-i]) == 1:
                        self.block_enemy_judgement(i)
            self.coin_judgement()
    def show(self,screen):
        if self.coin_count == self.coin_num:
            pygame.draw.ellipse(screen, (255,255,0), (self.goal_pos['x'], self.goal_pos['y'], self.goal_size['x'], self.goal_size['y']),0)  # ゴール(黄色塗りつぶし)
        for i in range(20):
            pygame.draw.rect(screen, (90,90,90), (i*40, 0, 40, 120+self.ground_list[i]*40),0)   # ステージ天井ブロック
            pygame.draw.rect(screen, (90,90,90), (i*40, 400+self.ground_list[i]*40, 40, 520-(400+self.ground_list[i]*40)),0)    # ステージ地面ブロック
        for i in range(20):
            pygame.draw.line(screen, (0,0,0), (i*40,120+self.ground_list[i]*40), (i*40+40,120+self.ground_list[i]*40),1)    # ステージ天井境界線(横)
            pygame.draw.line(screen, (0,0,0), (i*40,400+self.ground_list[i]*40), (i*40+40,400+self.ground_list[i]*40),1)    # ステージ地面境界線(横)
        for i in range(19):
            pygame.draw.line(screen, (0,0,0), (i*40+40,120+self.ground_list[i]*40), (i*40+40,120+self.ground_list[i+1]*40),1)   # ステージ天井境界線(縦)
            pygame.draw.line(screen, (0,0,0), (i*40+40,400+self.ground_list[i]*40), (i*40+40,400+self.ground_list[i+1]*40),1)   # ステージ地面境界線(縦)
        if self.coin_count == self.coin_num:
            pygame.draw.ellipse(screen, (255,255,0), (self.goal_pos['x'], self.goal_pos['y'], self.goal_size['x'], self.goal_size['y']),1)  # ゴール枠(黄色)
        pygame.draw.rect(screen, (255,255,255), (0, 520, 800, 80))  # Ifm背景
        pygame.draw.line(screen, (0,0,0), (0,520), (800, 520))  # Ifm境界線
        for i in range(1, len(format(self.block_enemy, 'b'))+1):
            if int(str(format(self.block_enemy, 'b'))[-i]) == 1:
                screen.blit(block_toge_png_list[i-1],(self.b_enemy1_pos[i-1][0],self.b_enemy1_pos[i-1][1])) # とげブロック
                if i == 5 and self.e_5_TimeCount > 0:
                    pygame.draw.rect(screen, (0, 0, 0), (self.e_5_TestX, self.e_5_TestY, 60, 60), max(30-int(self.e_5_TimeCount*60/150/2), 1))
        for i in range(self.coin_num):
            if self.coin_pos[i] != None:
                screen.blit(coin_png, (self.coin_pos[i][0], self.coin_pos[i][1]))   # コイン
        if P1.zone == 1:
            if P1.pos['x']%40 == 0:
                if P1.pos['x'] == 0:
                    if self.ground_list[0] > 0:
                        screen.blit(up_arrow_png, (0, 210))
                        if (0 <= pygame.mouse.get_pos()[0] <= 40 
                            and 210 <= pygame.mouse.get_pos()[1] <= 230):
                            self.mouse_on_up_arrow = 1
                            pygame.draw.rect(screen, (0, 0, 0), (0, 210, 40, 20), 1)
                else:
                    if self.ground_list[int(P1.pos['x']/40)] > -10:
                        screen.blit(up_arrow_png, (P1.pos['x'], 210))
                        if (P1.pos['x'] <= pygame.mouse.get_pos()[0] <= P1.pos['x'] + P1.size['x'] 
                            and 210 <= pygame.mouse.get_pos()[1] <= 230):
                            self.mouse_on_up_arrow = 1
                            pygame.draw.rect(screen, (0, 0, 0), (P1.pos['x'], 210, 40, 20), 1)
                if P1.pos['x'] != 0 and self.ground_list[int(P1.pos['x']/40)] < 10 or P1.pos['x'] == 0 and self.ground_list[0] < 9:
                    screen.blit(down_arrow_png, (P1.pos['x'], 290))
                    if (P1.pos['x'] <= pygame.mouse.get_pos()[0] <= P1.pos['x'] + P1.size['x'] 
                        and 290 <= pygame.mouse.get_pos()[1] <= 310):
                        self.mouse_on_down_arrow = 1
                        pygame.draw.rect(screen, (0, 0, 0), (P1.pos['x'], 290, 40, 20), 1)
            else:
                if P1.pos['x'] < 40:
                    if self.ground_list[0] > 0:
                        screen.blit(up_arrow_png, (0, 210))
                        if (0 <= pygame.mouse.get_pos()[0] <= 40 
                            and 210 <= pygame.mouse.get_pos()[1] <= 230):
                            self.mouse_on_up_arrow = 1
                            pygame.draw.rect(screen, (0, 0, 0), (0, 210, 40, 20), 1)
                else:
                    if self.ground_list[int(P1.pos['x']//40)] > -10:
                        screen.blit(up_arrow_png, (P1.pos['x']//40*40, 210))
                        if (P1.pos['x']//40*40 <= pygame.mouse.get_pos()[0] <= P1.pos['x']//40*40 + P1.size['x'] 
                            and 210 <= pygame.mouse.get_pos()[1] <= 230):
                            self.mouse_on_up_arrow = 1
                            pygame.draw.rect(screen, (0, 0, 0), (P1.pos['x']//40*40, 210, 40, 20), 1)
                if P1.pos['x']//40 != 0 and self.ground_list[int(P1.pos['x']//40)] < 10 or P1.pos['x']//40 == 0 and self.ground_list[0] < 9:
                    screen.blit(down_arrow_png, (P1.pos['x']//40*40, 290))
                    if (P1.pos['x']//40*40 <= pygame.mouse.get_pos()[0] <= P1.pos['x']//40*40 + P1.size['x'] 
                        and 290 <= pygame.mouse.get_pos()[1] <= 310):
                        self.mouse_on_down_arrow = 1
                        pygame.draw.rect(screen, (0, 0, 0), (P1.pos['x']//40*40, 290, 40, 20), 1)
        if P1.zone == 3:
            pygame.draw.rect(screen, (255,255,255), (0, 0, 800, 520))
            screen.blit(St_AllClear_txt, (100, 200))
    def show_2(self, screen):   # 最前面
        if St.start_text != 0:
            St_start_txt_1 = font3.render("ステージ："+str(St.st_num), True, (0, 0, 0))
            screen.blit(St_start_txt_1, (400-100*(5+len(str(St.st_num))/2)/2, 150)) # ステージ開始時のステージ数表示
        if P1.zone == 2:
            pygame.draw.rect(screen, (255,255,255), (0, 0, 800, 520))   # game over画面の背景
            screen.blit(St_GameOver_txt, (150, 210))    # game over の文字

    def b_enemy_move(self):
        for i in range(1, len(format(self.block_enemy, 'b'))+1):
            if int(str(format(self.block_enemy, 'b'))[-i]) == 1:
                e1_posX = self.b_enemy1_pos[i-1][0]
                e1_posY = self.b_enemy1_pos[i-1][1]
                e1_velX = self.b_enemy1_vel[i-1][0]
                e1_velY = self.b_enemy1_vel[i-1][1]

                e1_posX += e1_velX
                e1_posY += e1_velY
                if i == 1 or i == 2 or i == 3:
                    if 0 > e1_posX:
                        e1_posX = 0
                        e1_velX *= -1
                    elif e1_posX > 800-self.b_enemy1_size[i-1]:
                        e1_posX = 800-self.b_enemy1_size[i-1]
                        e1_velX *= -1
                    if 0 > e1_posY:
                        e1_posY = 0
                        e1_velY *= -1
                    elif e1_posY > 520-self.b_enemy1_size[i-1]:
                        e1_posY = 520-self.b_enemy1_size[i-1]
                        e1_velY *= -1
                elif i == 4:
                    if 0 > e1_posX:
                        e1_posX = 0
                        e1_velX *= -random.choice([0.5, 0.5, 1, 2])
                        e1_velY *= random.choice([0.5, 0.5, 1, 2, 4])
                    elif e1_posX > 800-self.b_enemy1_size[i-1]:
                        e1_posX = 800-self.b_enemy1_size[i-1]
                        e1_velX *= -random.choice([0.5, 0.5, 1, 2, 4])
                        e1_velY *= random.choice([0.5, 0.5, 1, 2, 4])
                    if abs(e1_velX) < 1:
                        e1_velX = 1 if e1_velX >= 0 else -1
                    elif 8 < abs(e1_velX):
                        e1_velX = 8 if e1_velX > 8 else -8

                    if 0 > e1_posY:
                        e1_posY = 0
                        e1_velX *= random.choice([0.5, 0.5, 1, 2, 4])
                        e1_velY *= -random.choice([0.5, 0.5, 1, 2, 4])
                    elif e1_posY > 520-self.b_enemy1_size[i-1]:
                        e1_posY = 520-self.b_enemy1_size[i-1]
                        e1_velX *= random.choice([0.5, 0.5, 1, 2, 4])
                        e1_velY *= -random.choice([0.5, 0.5, 1, 2, 4])
                    if abs(e1_velY) < 1:
                        e1_velY = 1 if e1_velY >= 0 else -1
                    elif 8 < abs(e1_velY):
                        e1_velY = 8 if e1_velY > 8 else -8
                elif i == 5:
                    if self.e_5_TimeCount == 0:
                        self.e_5_TestX = random.randint(0, 740)
                        self.e_5_TestY = random.randint(0, 370)
                    self.e_5_TimeCount += 1
                    if self.e_5_TimeCount == 150:
                        e1_velX = (self.e_5_TestX - e1_posX)/(50 if self.st_num < 18 else 25)
                        e1_velY = (self.e_5_TestY - e1_posY)/(50 if self.st_num < 18 else 25)
                    if abs(self.e_5_TestX - e1_posX) < abs(self.e_5_TestX - (e1_posX + e1_velX)) and abs(self.e_5_TestY - e1_posY) < abs(self.e_5_TestY - (e1_posY + e1_velY)): # 到着
                        e1_posX = self.e_5_TestX
                        e1_posY = self.e_5_TestY
                        e1_velX = 0
                        e1_velY = 0
                        self.e_5_TimeCount = 0
                    # 画面外に敵5が出た時の処理
                    if 0 > e1_posX:
                        e1_posX = 0
                        e1_velX = 0
                        e1_velY = 0
                        self.e_5_TimeCount = 149
                    elif e1_posX > 800-self.b_enemy1_size[i-1]:
                        e1_posX = 800-self.b_enemy1_size[i-1]
                        e1_velX = 0
                        e1_velY = 0
                        self.e_5_TimeCount = 149
                    if 0 > e1_posY:
                        e1_posY = 0
                        e1_velX = 0
                        e1_velY = 0
                        self.e_5_TimeCount = 149
                    elif e1_posY > 520-self.b_enemy1_size[i-1]:
                        e1_posY = 520-self.b_enemy1_size[i-1]
                        e1_velX = 0
                        e1_velY = 0
                        self.e_5_TimeCount = 149

                self.b_enemy1_pos[i-1][0] = e1_posX
                self.b_enemy1_pos[i-1][1] = e1_posY
                self.b_enemy1_vel[i-1][0] = e1_velX
                self.b_enemy1_vel[i-1][1] = e1_velY
    def block_enemy_judgement(self,b_enemy_num):
        if (self.b_enemy1_pos[b_enemy_num-1][0] <= P1.pos['x'] < self.b_enemy1_pos[b_enemy_num-1][0]+self.b_enemy1_size[b_enemy_num-1] 
            or self.b_enemy1_pos[b_enemy_num-1][0] < P1.pos['x']+P1.size['x'] <= self.b_enemy1_pos[b_enemy_num-1][0]+self.b_enemy1_size[b_enemy_num-1] 
            or P1.pos['x'] <= self.b_enemy1_pos[b_enemy_num-1][0] < P1.pos['x']+P1.size['x'] 
            or P1.pos['x'] <= self.b_enemy1_pos[b_enemy_num-1][0]+self.b_enemy1_size[b_enemy_num-1] < P1.pos['x']+P1.size['x']):
            if (self.b_enemy1_pos[b_enemy_num-1][1] <= P1.pos['y'] < self.b_enemy1_pos[b_enemy_num-1][1]+self.b_enemy1_size[b_enemy_num-1] 
                or self.b_enemy1_pos[b_enemy_num-1][1] < P1.pos['y']+P1.size['y'] <= self.b_enemy1_pos[b_enemy_num-1][1]+self.b_enemy1_size[b_enemy_num-1] 
                or P1.pos['y'] <= self.b_enemy1_pos[b_enemy_num-1][1] < P1.pos['y']+P1.size['y'] 
                or P1.pos['y'] <= self.b_enemy1_pos[b_enemy_num-1][1]+self.b_enemy1_size[b_enemy_num-1] < P1.pos['y']+P1.size['y']):
                if P1.flash == 0 and P1.no_control == 0:
                    impact_sound.play()
                P1.vel['x'] = 0
                P1.vel['y'] = 0
                if P1.no_control == 0:
                    P1.flash = 1
                P1.no_control = 1
    def coin_judgement(self):
        for i in range(self.coin_num):
            if self.coin_pos[i] != None:
                coin_get = 0
                if P1.pos['x'] <= self.coin_pos[i][0]+self.coin_size[0]/2 <= P1.pos['x']+P1.size['x']:
                    if (P1.pos['y'] < self.coin_pos[i][1] < P1.pos['y']+P1.size['y'] or P1.pos['y'] < self.coin_pos[i][1]+self.coin_size[1] < P1.pos['y']+P1.size['y']):
                        coin_get = 1
                elif P1.pos['y'] <= self.coin_pos[i][1]+self.coin_size[1]/2 <= P1.pos['y']+P1.size['y']:
                    if P1.pos['x'] < self.coin_pos[i][0] < P1.pos['x']+P1.size['x'] or P1.pos['x'] < self.coin_pos[i][0]+self.coin_size[0] < P1.pos['x']+P1.size['x']:
                        coin_get = 1
                else:
                    if ((((self.coin_pos[i][0]+self.coin_size[0]/2)-P1.pos['x'])**2 + ((self.coin_pos[i][1]+8)-P1.pos['y'])**2)**0.5 
                        + (((self.coin_pos[i][0]+self.coin_size[0]/2)-P1.pos['x'])**2 + ((self.coin_pos[i][1]+32)-P1.pos['y'])**2)**0.5 
                        <= self.coin_size[1]): # プレイヤー左上
                        coin_get = 1
                    elif ((((self.coin_pos[i][0]+self.coin_size[0]/2)-(P1.pos['x']+P1.size['x']))**2 + ((self.coin_pos[i][1]+8)-P1.pos['y'])**2)**0.5 
                          + (((self.coin_pos[i][0]+self.coin_size[0]/2)-(P1.pos['x']+P1.size['x']))**2 + ((self.coin_pos[i][1]+32)-P1.pos['y'])**2)**0.5 
                          <= self.coin_size[1]):   # プレイヤー右上
                        coin_get = 1
                    elif ((((self.coin_pos[i][0]+self.coin_size[0]/2)-P1.pos['x'])**2 + ((self.coin_pos[i][1]+8)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                          + (((self.coin_pos[i][0]+self.coin_size[0]/2)-P1.pos['x'])**2 + ((self.coin_pos[i][1]+32)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                          <= self.coin_size[1]):   # プレイヤー左下
                        coin_get = 1
                    elif ((((self.coin_pos[i][0]+self.coin_size[0]/2)-(P1.pos['x']+P1.size['x']))**2 + ((self.coin_pos[i][1]+8)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                          + (((self.coin_pos[i][0]+self.coin_size[0]/2)-(P1.pos['x']+P1.size['x']))**2 + ((self.coin_pos[i][1]+32)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                          <= self.coin_size[1]): # プレイヤー右下
                        coin_get = 1
                if coin_get == 1:
                    coin_sound.play()
                    self.coin_pos[i] = None
                    self.coin_count += 1
                    global Ifm_txt_coin_counter
                    Ifm_txt_coin_counter = font1.render("コイン獲得枚数："+str(St.coin_count)+"/"+str(St.coin_num), True, (0, 0, 0))
    def stage_element_process(self, P1SizeX, P1SizeY, P1JumpPower, IfmLives, St_b_enemy, StGoalPosX, StGoalPosY, StGoalSizeX, StGoalSizeY, StGoalGap, StCoinNum):
        self.ground_list = []
        for i in range(20):
            self.ground_list.append(0)
        P1.size = {'x':P1SizeX, 'y':P1SizeY}
        P1.jump_power = P1JumpPower
        Ifm.lives = IfmLives
        global Ifm_txt_lives
        Ifm_txt_lives = font1.render("残りライフ："+str(Ifm.lives), True, (0, 0, 0))
        self.block_enemy = St_b_enemy
        self.b_enemy1_pos = copy.deepcopy(self.b_enemy0_pos)
        self.b_enemy1_size = copy.deepcopy(self.b_enemy0_size)
        self.b_enemy1_vel = copy.deepcopy(self.b_enemy0_vel)
        if self.st_num >= 18:
            self.b_enemy1_vel[2][0] = 6
            self.b_enemy1_vel[2][1] = 5
        self.e_5_TimeCount = 0
        while True:
            self.goal_pos = {'x':StGoalPosX + random.randint(-StGoalGap, StGoalGap), 'y':StGoalPosY + random.randint(-StGoalGap, StGoalGap)}
            self.goal_size = {'x':StGoalSizeX, 'y':StGoalSizeY}
            if 0 <= self.goal_pos['x'] <= 800-self.goal_size['x']:
                if 0 <= self.goal_pos['y'] <= 520-self.goal_size['y']:
                    break
        self.coin_num = StCoinNum
        self.coin_pos = []
        for i in range(self.coin_num):
            while True:
                Test_X = random.randint(0, 800-self.coin_size[0])
                Test_Y = random.randint(0, 520-self.coin_size[1])
                No_use = 0
                if abs((Test_X+self.coin_size[0])/2 - (P1.pos['x']+P1.size['x'])/2) <= 100 and abs((Test_Y+self.coin_size[1])/2 - (P1.pos['y']+P1.size['y'])/2) <= 100:
                    No_use = 1
                elif Test_X + Test_Y < 320:
                    No_use = 1
                else:
                    for i in range(1, len(format(self.block_enemy, 'b'))+1):
                        if int(str(format(self.block_enemy, 'b'))[-i]) == 1:
                            if (self.b_enemy1_pos[i-1][0] < Test_X < self.b_enemy1_pos[i-1][0]+self.b_enemy1_size[i-1] 
                                or self.b_enemy1_pos[i-1][0] < Test_X+self.coin_size[0] < self.b_enemy1_pos[i-1][0]+self.b_enemy1_size[i-1]):
                                if (self.b_enemy1_pos[i-1][1] < Test_Y < self.b_enemy1_pos[i-1][1]+self.b_enemy1_size[i-1] 
                                    or self.b_enemy1_pos[i-1][1] < Test_Y+self.coin_size[1] < self.b_enemy1_pos[i-1][1]+self.b_enemy1_size[i-1]):
                                    No_use = 1
                    for i in range(len(self.coin_pos)):
                        if Test_X <= self.coin_pos[i][0] <= Test_X+self.coin_size[0] or Test_X <= self.coin_pos[i][0]+self.coin_size[0] <= Test_X+self.coin_size[0]:
                            if Test_Y <= self.coin_pos[i][1] <= Test_Y+self.coin_size[1] or Test_Y <= self.coin_pos[i][1]+self.coin_size[1] <= Test_Y+self.coin_size[1]:
                                No_use = 1
                if No_use == 0:
                    self.coin_pos.append([Test_X, Test_Y])
                    break
        self.coin_count = 0
        global Ifm_txt_coin_counter
        Ifm_txt_coin_counter = font1.render("コイン獲得枚数："+str(St.coin_count)+"/"+str(St.coin_num), True, (0, 0, 0))

class information_bar():
    def __init__(self):
        self.lives = 5
        self.pos = {'x':0,'y':520}
        self.mouse_on_txt_killME = 0
        self.mouse_on_txt_restart = 0
        self.mouse_on_txt_menu = 0
    def show(self,screen):
        screen.blit(Ifm_txt_stage_num, (self.pos['x'], self.pos['y']))
        if P1.flash == 0 or (P1.flash == 1 or P1.flash == 2 or P1.flash == 3) and P1.flash_count//10%2 == 1:
            screen.blit(Ifm_txt_lives, (self.pos['x']+300, self.pos['y']))
        screen.blit(Ifm_txt_coin_counter, (self.pos['x'], self.pos['y']+40))
        if P1.flash == 0 or P1.flash == 1 or P1.flash == 2 or P1.flash == 3 and P1.flash_count//10%2 == 1:
            screen.blit(Ifm_txt_kill_myself, (self.pos['x']+635, self.pos['y']))
        screen.blit(Ifm_txt_restart, (self.pos['x']+600, self.pos['y']+25))
        screen.blit(Ifm_txt_menu, (self.pos['x']+635, self.pos['y']+50))
        if Menu.show_YN == 0:
            if 635 <= pygame.mouse.get_pos()[0] <= 772.5:
                if 520 <= pygame.mouse.get_pos()[1] <= 545:
                    self.mouse_on_txt_killME = 1
                    pygame.draw.rect(screen, (0, 0, 0), (self.pos['x']+635, self.pos['y'], 137.5, 25), 1)
            if 600 <= pygame.mouse.get_pos()[0] <= 787.5:
                if 545 <= pygame.mouse.get_pos()[1] <= 570:
                    self.mouse_on_txt_restart = 1
                    pygame.draw.rect(screen, (0, 0, 0), (self.pos['x']+600, self.pos['y']+25, 187.5, 25), 1)
            if 635 <= pygame.mouse.get_pos()[0] <= 772.5:
                if 570 <= pygame.mouse.get_pos()[1] <= 595:
                    self.mouse_on_txt_menu = 1
                    pygame.draw.rect(screen, (0, 0, 0), (self.pos['x']+635, self.pos['y']+50, 137.5, 25), 1)

class menu():
    def __init__(self):
        self.show_YN = 0
        # self.page_contents = ["Main", "Rule", "Serect_stage"]
        self.page_num = 0
        self.pagetxt_rule = ["・ステージ変更モードで","　自分の道を切り開け","・ゴールにたどりつくと","　次のステージに進めるぞ",
                             "・ステージ変更モードを使ったり","　敵に当たったりすると","　ライフが減るぞ"]
        self.pagetxt_serect_stage = ["1   2   3   4   5","6   7   8   9","10  11  12  13  14","15  16  17  18","19  20  21  22  23"]
        self.pagetxt_serectSt_posX1 = [[145,175],[265,295],[385,415],[505,535],[625,655]]
        self.pagetxt_serectSt_posX2 = [[205,235],[325,355],[445,475],[565,595]]
        self.pagetxt_serectSt_posX3 = [[130,190],[250,310],[370,430],[490,550],[610,670]]
        self.pagetxt_serectSt_posX4 = [[190,250],[310,370],[430,490],[550,610]]
        self.mouse_on_cross = 0
        self.mouse_on_txt_X = 0
        self.mouse_on_maintxt_HowToPlay = 0
        self.mouse_on_maintxt_SerectSt = 0
        self.mouse_on_maintxt_VolSetting = 0
        self.mouse_on_pagetxt_SerectSt = 0
        self.mouse_on_back = 0
        self.mouse_on_pagetxt_VolSetting_line = 0
        self.mouse_on_pagetxt_VolSetting_PlusMinus = 0  # 1BGM＋ 2BGM－ 3効果音＋ 4効果音－
        self.VolSetting_PM_and_time = [0, 0]    # 1BGM＋ 2BGM－ 3効果音＋ 4効果音－, 時間
        self.VolSetting_square_cursor = 1   # 1BGM＋ 2BGM－ 3効果音＋ 4効果音－
        self.VolSetting = 0  # 音量変更中(スライダーで)
        self.BGM_volume = 50
        self.SoundEffect_volume = 50
        self.SSP_pos_list = [[175,150],[295,150],[415,150],[535,150],[655,150],
                             [235,210],[355,210],[475,210],[595,210],
                             [190,270],[310,270],[430,270],[550,270],[670,270],
                             [250,330],[370,330],[490,330],[610,330],
                             [190,390],[310,390],[430,390],[550,390],[670,390]]
        self.SSP_pos_index = 0
        self.SSP_pos_GapY = 0
        self.SSP_size = {'x':20, 'y':20}
        self.SSP_velY = 0
    def show(self,screen):
        pause_rect = pygame.Surface((800, 600), pygame.SRCALPHA)
        pygame.draw.rect(pause_rect, (255,255,255,150), pause_rect.get_rect())
        pause_rect.set_alpha(150)# 四角形の透明度を設定
        screen.blit(pause_rect, (0, 0))# 四角形を画面に描画

        pygame.draw.rect(screen, (255,255,255), (100, 100, 600, 400), border_radius=15)
        pygame.draw.rect(screen, (0,0,0), (100, 100, 600, 400), 2, border_radius=15)

        if self.page_num == 0:  # トップ
            screen.blit(menu_maintxt_HowToPlay, (110, 150))
            if 110 <= pygame.mouse.get_pos()[0] <= 617.5:
                if 150 <= pygame.mouse.get_pos()[1] <= 185:
                    self.mouse_on_maintxt_HowToPlay = 1
                    pygame.draw.rect(screen, (0, 0, 0), (110, 150, 507.5, 35), 1)
            screen.blit(menu_maintxt_SerectSt, (110, 190))
            if 110 <= pygame.mouse.get_pos()[0] <= 477.5:
                if 190 <= pygame.mouse.get_pos()[1] <= 225:
                    self.mouse_on_maintxt_SerectSt = 1
                    pygame.draw.rect(screen, (0, 0, 0), (110, 190, 367.5, 35), 1)
            screen.blit(menu_maintxt_VolSetting, (110, 230))
            if 110 <= pygame.mouse.get_pos()[0] <= 372.5:
                if 230 <= pygame.mouse.get_pos()[1] <= 265:
                    self.mouse_on_maintxt_VolSetting = 1
                    pygame.draw.rect(screen, (0, 0, 0), (110, 230, 262.5, 35), 1)
        if self.page_num != 0:
            screen.blit(menu_pagetxt_back, (110, 112.5))
            if 110 <= pygame.mouse.get_pos()[0] <= 272.5:
                if 112.5 <= pygame.mouse.get_pos()[1] <= 137.5:
                    self.mouse_on_back = 1
                    pygame.draw.rect(screen, (0, 0, 0), (110, 112.5, 162.5, 25), 1)
        if self.page_num == 1:  # 説明
            for i in range(0,len(self.pagetxt_rule)):
                screen.blit(menu_pagetxt_HowToPlay[i], (110, 150+i*40))
        if self.page_num == 2:  # ステージ選択画面
            for i in range(0,len(self.pagetxt_serect_stage)):
                screen.blit(menu_pagetxt_SerectSt[i], (400-len(self.pagetxt_serect_stage[i])*15, 150+i*60)) # ステージ数の描画(1~23)
            self.SSP_velY += 0.08
            if self.SSP_pos_GapY >= 40:
                self.SSP_pos_GapY == 40
                self.SSP_velY = -2.5
            self.SSP_pos_GapY += self.SSP_velY
            pygame.draw.rect(screen, (255,255,0), (self.SSP_pos_list[self.SSP_pos_index][0], self.SSP_pos_list[self.SSP_pos_index][1]+self.SSP_pos_GapY, self.SSP_size['x'], self.SSP_size['y']))
            pygame.draw.rect(screen, (0,0,0), (self.SSP_pos_list[self.SSP_pos_index][0], self.SSP_pos_list[self.SSP_pos_index][1]+self.SSP_pos_GapY, self.SSP_size['x'], self.SSP_size['y']), 1)
            screen.blit(menu_pagetxt_SerectSt_explain, (145, 450))
            if 150 <= pygame.mouse.get_pos()[1] <= 210:
                for i in range(5):
                    if self.pagetxt_serectSt_posX1[i][0] <= pygame.mouse.get_pos()[0] <= self.pagetxt_serectSt_posX1[i][1]:
                        self.mouse_on_pagetxt_SerectSt = i+1
                        pygame.draw.rect(screen, (0, 0, 0), (self.pagetxt_serectSt_posX1[i][0], 150, 30, 60), 1)
            if 210 <= pygame.mouse.get_pos()[1] <= 270:
                for i in range(4):
                    if self.pagetxt_serectSt_posX2[i][0] <= pygame.mouse.get_pos()[0] <= self.pagetxt_serectSt_posX2[i][1]:
                        self.mouse_on_pagetxt_SerectSt = i+6
                        pygame.draw.rect(screen, (0, 0, 0), (self.pagetxt_serectSt_posX2[i][0], 210, 30, 60), 1)
            if 270 <= pygame.mouse.get_pos()[1] <= 330:
                for i in range(5):
                    if self.pagetxt_serectSt_posX3[i][0] <= pygame.mouse.get_pos()[0] <= self.pagetxt_serectSt_posX3[i][1]:
                        self.mouse_on_pagetxt_SerectSt = i+10
                        pygame.draw.rect(screen, (0, 0, 0), (self.pagetxt_serectSt_posX3[i][0], 270, 60, 60), 1)
            if 330 <= pygame.mouse.get_pos()[1] <= 390:
                for i in range(4):
                    if self.pagetxt_serectSt_posX4[i][0] <= pygame.mouse.get_pos()[0] <= self.pagetxt_serectSt_posX4[i][1]:
                        self.mouse_on_pagetxt_SerectSt = i+15
                        pygame.draw.rect(screen, (0, 0, 0), (self.pagetxt_serectSt_posX4[i][0], 330, 60, 60), 1)
            if 390 <= pygame.mouse.get_pos()[1] <= 450:
                for i in range(5):
                    if self.pagetxt_serectSt_posX3[i][0] <= pygame.mouse.get_pos()[0] <= self.pagetxt_serectSt_posX3[i][1]:
                        self.mouse_on_pagetxt_SerectSt = i+19
                        pygame.draw.rect(screen, (0, 0, 0), (self.pagetxt_serectSt_posX3[i][0], 390, 60, 60), 1)
        if self.page_num == 3:  # 音量設定
            screen.blit(menu_pagetxt_VolSetting[0], (320, 200))   # "音量設定", 40

            screen.blit(menu_pagetxt_VolSetting[1], (180, 270))   # "BGM", 35
            pygame.draw.line(screen, (0, 0, 0), (350, 287.5), (600, 287.5), 3)
            BGM_Volume_Circle = pygame.draw.circle(screen, (0, 0, 0), (350+250*self.BGM_volume/100, 287.5), 10, 3)
            screen.blit(menu_pagetxt_VolSetting[3], (475-len(str(self.BGM_volume))*6.25, 250))
            screen.blit(menu_pagetxt_VolSetting[5], (305, 275))  # "－", 25
            screen.blit(menu_pagetxt_VolSetting[6], (620, 275))  # "＋", 25

            screen.blit(menu_pagetxt_VolSetting[2], (180, 320))   # "効果音", 35
            pygame.draw.line(screen, (0, 0, 0), (350, 337.5), (600, 337.5), 3)
            SoundEffect_Volume_Circle = pygame.draw.circle(screen, (0, 0, 0), (350+250*self.SoundEffect_volume/100, 337.5), 10, 3)
            screen.blit(menu_pagetxt_VolSetting[4], (475-len(str(self.SoundEffect_volume))*6.25, 300))
            screen.blit(menu_pagetxt_VolSetting[5], (305, 325))  # "－", 25
            screen.blit(menu_pagetxt_VolSetting[6], (620, 325))  # "＋", 25

            if self.VolSetting_square_cursor == 1:
                pygame.draw.rect(screen, (0, 0, 0), (305, 275, 25, 25), 1)
            if self.VolSetting_square_cursor == 2:
                pygame.draw.rect(screen, (0, 0, 0), (620, 275, 25, 25), 1)
            if self.VolSetting_square_cursor == 3:
                pygame.draw.rect(screen, (0, 0, 0), (305, 325, 25, 25), 1)
            if self.VolSetting_square_cursor == 4:
                pygame.draw.rect(screen, (0, 0, 0), (620, 325, 25, 25), 1)

            if (350 <= pygame.mouse.get_pos()[0] <= 600 and 277.5 <= pygame.mouse.get_pos()[1] <= 297.5 
                or (abs(pygame.mouse.get_pos()[0]-(BGM_Volume_Circle.x+10))**2+abs(pygame.mouse.get_pos()[1]-(BGM_Volume_Circle.y+10))**2)**0.5 <= 10):   # BGM_Volume_Circle.x は左上の座標
                self.mouse_on_pagetxt_VolSetting_line = 1
            elif (350 <= pygame.mouse.get_pos()[0] <= 600 and 327.5 <= pygame.mouse.get_pos()[1] <= 347.5 
                  or (abs(pygame.mouse.get_pos()[0]-(SoundEffect_Volume_Circle.x+10))**2+abs(pygame.mouse.get_pos()[1]-(SoundEffect_Volume_Circle.y+10))**2)**0.5 <= 10):
                self.mouse_on_pagetxt_VolSetting_line = 2

            if self.VolSetting == 1:
                pygame.draw.circle(screen, (100, 100, 100), (350+250*self.BGM_volume/100, 287.5), 10)
            elif self.VolSetting == 2:
                pygame.draw.circle(screen, (100, 100, 100), (350+250*self.SoundEffect_volume/100, 337.5), 10)

            if 305 <= pygame.mouse.get_pos()[0] <= 330 and 275 <= pygame.mouse.get_pos()[1] <= 300:
                self.mouse_on_pagetxt_VolSetting_PlusMinus = 1
            elif 620 <= pygame.mouse.get_pos()[0] <= 645 and 275 <= pygame.mouse.get_pos()[1] <= 300:
                self.mouse_on_pagetxt_VolSetting_PlusMinus = 2
            elif 305 <= pygame.mouse.get_pos()[0] <= 330 and 325 <= pygame.mouse.get_pos()[1] <= 350:
                self.mouse_on_pagetxt_VolSetting_PlusMinus = 3
            elif 620 <= pygame.mouse.get_pos()[0] <= 645 and 325 <= pygame.mouse.get_pos()[1] <= 350:
                self.mouse_on_pagetxt_VolSetting_PlusMinus = 4
            
            screen.blit(menu_pagetxt_VolSetting[7], (275, 380))
            screen.blit(menu_pagetxt_VolSetting[8], (318.75, 410))

        screen.blit(menu_txt_txtX, (370, 112.5))
        screen.blit(menu_txt_X_1, (662.5, 112.5))
        pygame.draw.circle(screen, (0,0,0), (675, 125), 15, 1)
        if ((pygame.mouse.get_pos()[0]-675)**2 + (pygame.mouse.get_pos()[1]-125)**2)**0.5 <= 15:
            self.mouse_on_cross = 1
            pygame.draw.circle(screen, (100,100,100), (675, 125), 15)
            screen.blit(menu_txt_X_2, (662.5, 112.5))
        if 370 <= pygame.mouse.get_pos()[0] <= 657.5:
            if 112.5 <= pygame.mouse.get_pos()[1] <= 137.5:
                self.mouse_on_txt_X = 1
                pygame.draw.rect(screen, (0, 0, 0), (370, 112.5, 287.5, 25), 1)

def main():
    pygame.init()
    pygame.mixer.init()
    screen = pygame.display.set_mode((800, 600))
    global P1
    P1 = Player()
    global St
    St = stage()
    global Ifm
    Ifm = information_bar()
    global Menu
    Menu = menu()

    global font1
    font1 = pygame.font.SysFont("uddigikyokashonr", 40)
    global font2
    font2 = pygame.font.SysFont("uddigikyokashonr", 25)
    global font3
    font3 = pygame.font.SysFont("uddigikyokashonr", 100)
    global font4
    font4 = pygame.font.SysFont("uddigikyokashonr", 35)
    global font5
    font5 = pygame.font.SysFont("uddigikyokashonr", 60)

    global Ifm_txt_stage_num
    Ifm_txt_stage_num = font1.render("ステージ："+str(St.st_num), True, (0, 0, 0))
    global Ifm_txt_lives
    Ifm_txt_lives = font1.render("残りライフ："+str(Ifm.lives), True, (0, 0, 0))
    global Ifm_txt_coin_counter
    Ifm_txt_coin_counter = font1.render("コイン獲得枚数："+str(St.coin_count)+"/"+str(St.coin_num), True, (0, 0, 0))
    global Ifm_txt_kill_myself
    Ifm_txt_kill_myself = font2.render("自爆：tキー", True, (0, 0, 0))
    global Ifm_txt_restart
    Ifm_txt_restart = font2.render("やり直し：rキー", True, (0, 0, 0))
    global Ifm_txt_menu
    Ifm_txt_menu = font2.render("MENU：mキー", True, (0, 0, 0))

    global menu_txt_X_1
    menu_txt_X_1 = font2.render("×", True, (0, 0, 0))
    global menu_txt_X_2
    menu_txt_X_2 = font2.render("×", True, (255, 255, 255))
    global menu_txt_txtX
    menu_txt_txtX = font2.render("メニューを閉じる：mキー", True, (0, 0, 0))

    global menu_maintxt_HowToPlay
    menu_maintxt_HowToPlay = font4.render("ゲームの遊び方・ルール：1キー", True, (0, 0, 0))
    global menu_maintxt_SerectSt
    menu_maintxt_SerectSt = font4.render("ステージの選択：2キー", True, (0, 0, 0))
    global menu_maintxt_VolSetting
    menu_maintxt_VolSetting = font4.render("音量設定：3キー", True, (0, 0, 0))

    global menu_pagetxt_HowToPlay
    menu_pagetxt_HowToPlay = []
    for i in Menu.pagetxt_rule:
        menu_pagetxt_HowToPlay.append(font4.render(i, True, (0, 0, 0)))
    global menu_pagetxt_SerectSt
    menu_pagetxt_SerectSt = []
    for i in Menu.pagetxt_serect_stage:
        menu_pagetxt_SerectSt.append(font5.render(i, True, (0, 0, 0)))
    global menu_pagetxt_VolSetting
    menu_pagetxt_VolSetting = [font1.render("音量設定", True, (0, 0, 0)), 
                               font4.render("BGM", True, (0, 0, 0)), 
                               font4.render("効果音", True, (0, 0, 0)), 
                               font2.render(str(Menu.BGM_volume), True, (0, 0, 0)), 
                               font2.render(str(Menu.SoundEffect_volume), True, (0, 0, 0)), 
                               font2.render("－", True, (0, 0, 0)), 
                               font2.render("＋", True, (0, 0, 0)), 
                               font2.render("四角いカーソルを動かす：矢印キー", True, (0, 0, 0)), 
                               font2.render("音量を調節する：enterキー", True, (0, 0, 0))]
    global menu_pagetxt_back
    menu_pagetxt_back = font2.render("<<戻る：bキー", True, (0, 0, 0))
    global menu_pagetxt_SerectSt_explain
    menu_pagetxt_SerectSt_explain = font4.render("選択：←→キー　決定：enterキー", True, (0, 0, 0))

    global St_start_txt_1
    St_start_txt_1 = font3.render("ステージ："+str(St.st_num), True, (0, 0, 0))
    global St_GameOver_txt
    St_GameOver_txt = font3.render("GameOver…", True, (255, 0, 0))
    global St_AllClear_txt
    St_AllClear_txt = font5.render("最終ステージクリア！", True, (0, 0, 0))

    clock = pygame.time.Clock()
    START_TEXT_RESET = pygame.USEREVENT +1

    global block_toge_png_list
    block_toge_png_list = []
    for i in range(len(St.b_enemy1_size)):
        block_toge_png_list.append(pygame.transform.rotozoom(pygame.image.load("block_toge.png"),0,St.b_enemy1_size[i]/1000))

    global coin_png
    coin_png = pygame.transform.rotozoom(pygame.image.load("coin.png"),0,40/1000)

    global up_arrow_png
    up_arrow_png = pygame.transform.rotozoom(pygame.image.load("up_arrow.png"),0,40/1000)
    global down_arrow_png
    down_arrow_png = pygame.transform.rotozoom(pygame.image.load("up_arrow.png"),180,40/1000)

    global BGM
    BGM = pygame.mixer.Sound('魔王魂 ループ  8bit11.mp3')
    global goal_sound
    goal_sound = pygame.mixer.Sound('goal.mp3')
    global decision_sound
    decision_sound = pygame.mixer.Sound('decision.mp3')
    global serect_sound
    serect_sound = pygame.mixer.Sound('serect.mp3')
    global open_menu_sound
    open_menu_sound = pygame.mixer.Sound('open_menu.mp3')
    global cancel_sound
    cancel_sound = pygame.mixer.Sound('cancel.mp3')
    global jump_sound
    jump_sound = pygame.mixer.Sound('jump.mp3')
    global impact_sound
    impact_sound = pygame.mixer.Sound('Arcade-Action01-6(Impact).mp3')
    global coin_sound
    coin_sound = pygame.mixer.Sound('coin.mp3')

    BGM.set_volume(Menu.BGM_volume/100)
    goal_sound.set_volume(Menu.SoundEffect_volume/100)
    decision_sound.set_volume(Menu.SoundEffect_volume/100)
    serect_sound.set_volume(Menu.SoundEffect_volume/100)
    open_menu_sound.set_volume(Menu.SoundEffect_volume/100)
    cancel_sound.set_volume(Menu.SoundEffect_volume/100)
    jump_sound.set_volume(Menu.SoundEffect_volume/100)
    impact_sound.set_volume(Menu.SoundEffect_volume/100)
    coin_sound.set_volume(Menu.SoundEffect_volume/100)

    pygame.time.set_timer(START_TEXT_RESET, 1500)
    BGM.play(-1)
    while True:
        screen.fill((255,255,255))

        if St.mouse_on_up_arrow == 1:
            St.mouse_on_up_arrow = 0
        if St.mouse_on_down_arrow == 1:
            St.mouse_on_down_arrow = 0
        St.St_main(screen)

        P1.show(screen)
        if Menu.show_YN == 0:
            P1.move(0,0)
        if P1.no_control == 1:
            if P1.pos['y'] == 400-P1.size['y']:
                if P1.pos['x'] == 0 or P1.zone == 3:
                    P1.no_control = 0

        if Ifm.mouse_on_txt_killME == 1:
            Ifm.mouse_on_txt_killME = 0
        if Ifm.mouse_on_txt_restart == 1:
            Ifm.mouse_on_txt_restart = 0
        if Ifm.mouse_on_txt_menu == 1:
            Ifm.mouse_on_txt_menu = 0
        Ifm.show(screen)

        St.show_2(screen)

        if Menu.mouse_on_cross == 1:
            Menu.mouse_on_cross = 0
        if Menu.mouse_on_txt_X == 1:
            Menu.mouse_on_txt_X = 0
        if Menu.mouse_on_maintxt_HowToPlay == 1:
            Menu.mouse_on_maintxt_HowToPlay = 0
        if Menu.mouse_on_maintxt_SerectSt == 1:
            Menu.mouse_on_maintxt_SerectSt = 0
        if Menu.mouse_on_maintxt_VolSetting == 1:
            Menu.mouse_on_maintxt_VolSetting = 0
        if Menu.mouse_on_pagetxt_SerectSt != 0:
            Menu.mouse_on_pagetxt_SerectSt = 0
        if Menu.mouse_on_back == 1:
            Menu.mouse_on_back = 0
        if Menu.mouse_on_pagetxt_VolSetting_line != 0:
            Menu.mouse_on_pagetxt_VolSetting_line = 0
        if Menu.mouse_on_pagetxt_VolSetting_PlusMinus != 0:
            Menu.mouse_on_pagetxt_VolSetting_PlusMinus = 0
        if Menu.show_YN == 1:
            Menu.show(screen)

        for event in pygame.event.get(): 
            if event.type == QUIT:
                pygame.quit() 
                sys.exit()
            if event.type == KEYDOWN:
                if St.next == 0:
                    if event.key == K_m:
                        if Menu.show_YN == 1:
                            cancel_sound.play()
                            Menu.show_YN = 0
                        elif Menu.show_YN == 0:
                            open_menu_sound.play()
                            Menu.page_num = 0
                            Menu.show_YN = 1
                    if Menu.show_YN == 1:       # メニュー内
                        if Menu.page_num == 0:
                            if event.key == K_1:
                                serect_sound.play()
                                Menu.page_num = 1
                            if event.key == K_2:
                                serect_sound.play()
                                Menu.page_num = 2
                                Menu.SSP_pos_index = St.st_num-1
                                Menu.SSP_pos_GapY = 0
                                Menu.SSP_velY = 0
                            if event.key == K_3:
                                serect_sound.play()
                                Menu.page_num = 3
                        if Menu.page_num == 2:
                            if event.key == K_RIGHT:
                                if Menu.SSP_pos_index <= 21:
                                    serect_sound.play()
                                    Menu.SSP_pos_index += 1
                                    Menu.SSP_pos_GapY = 0
                                    Menu.SSP_velY = 0
                            if event.key == K_LEFT:
                                if Menu.SSP_pos_index >= 1:
                                    serect_sound.play()
                                    Menu.SSP_pos_index -= 1
                                    Menu.SSP_pos_GapY = 0
                                    Menu.SSP_velY = 0
                            if event.key == K_RETURN:
                                if St.st_num != Menu.SSP_pos_index+1:
                                    decision_sound.play()
                                    St.st_num = Menu.SSP_pos_index+1
                                    St.start_text = St.st_num
                                    Ifm_txt_stage_num = font1.render("ステージ："+str(St.st_num), True, (0, 0, 0))
                                    St_start_txt_1 = font3.render("ステージ："+str(St.st_num), True, (0, 0, 0))
                                    Menu.show_YN = 0
                                    P1.zone = 0
                                    P1.flash = 0
                                    P1.pos['x'] = 0
                                    P1.pos['y'] = 340
                                    P1.vel['x'] = 0
                                    P1.vel['y'] = 0
                                    P1.no_control = 1
                                    St.stage_element_process(St.stage_element[St.st_num-1][0], St.stage_element[St.st_num-1][1], 
                                                             St.stage_element[St.st_num-1][2], St.stage_element[St.st_num-1][3],
                                                             St.stage_element[St.st_num-1][4], St.stage_element[St.st_num-1][5],
                                                             St.stage_element[St.st_num-1][6], St.stage_element[St.st_num-1][7],
                                                             St.stage_element[St.st_num-1][8], St.stage_element[St.st_num-1][9],
                                                             St.stage_element[St.st_num-1][10])
                                    pygame.time.set_timer(START_TEXT_RESET, 2000)
                        if Menu.page_num == 3:
                            if event.key == K_RIGHT:
                                if Menu.VolSetting_square_cursor == 1 or Menu.VolSetting_square_cursor == 3:
                                    Menu.VolSetting_square_cursor += 1
                            if event.key == K_LEFT:
                                if Menu.VolSetting_square_cursor == 2 or Menu.VolSetting_square_cursor == 4:
                                    Menu.VolSetting_square_cursor -= 1
                            if event.key == K_UP:
                                if Menu.VolSetting_square_cursor == 3 or Menu.VolSetting_square_cursor == 4:
                                    Menu.VolSetting_square_cursor -= 2
                            if event.key == K_DOWN:
                                if Menu.VolSetting_square_cursor == 1 or Menu.VolSetting_square_cursor == 2:
                                    Menu.VolSetting_square_cursor += 2
                            if event.key == K_RETURN:
                                if Menu.BGM_volume > 0 and Menu.VolSetting_square_cursor == 1:
                                    serect_sound.play()
                                    Menu.VolSetting_PM_and_time[0] = 1
                                elif Menu.BGM_volume < 100 and Menu.VolSetting_square_cursor == 2:
                                    serect_sound.play()
                                    Menu.VolSetting_PM_and_time[0] = 2
                                elif Menu.SoundEffect_volume > 0 and Menu.VolSetting_square_cursor == 3:
                                    serect_sound.play()
                                    Menu.VolSetting_PM_and_time[0] = 3
                                elif Menu.SoundEffect_volume < 100 and Menu.VolSetting_square_cursor == 4:
                                    serect_sound.play()
                                    Menu.VolSetting_PM_and_time[0] = 4
                        if event.key == K_b:
                            cancel_sound.play()
                            Menu.page_num = 0

                    if Menu.show_YN == 0:       # メニュー外
                        if P1.zone != 3:
                            if event.key == K_t:
                                if Ifm.lives >= 1:
                                    impact_sound.play()
                                    P1.zone = 0
                                    P1.flash_count = 0
                                    P1.flash = 3
                            if event.key == K_r:
                                decision_sound.play()
                                P1.zone = 0
                                P1.flash = 0
                                P1.pos['x'] = 0
                                P1.pos['y'] = 340
                                P1.vel['x'] = 0
                                P1.vel['y'] = 0
                                P1.no_control = 1
                                St.start_text = St.st_num
                                St.stage_element_process(St.stage_element[St.st_num-1][0], St.stage_element[St.st_num-1][1], 
                                                        St.stage_element[St.st_num-1][2], St.stage_element[St.st_num-1][3],
                                                        St.stage_element[St.st_num-1][4], St.stage_element[St.st_num-1][5],
                                                        St.stage_element[St.st_num-1][6], St.stage_element[St.st_num-1][7],
                                                        St.stage_element[St.st_num-1][8], St.stage_element[St.st_num-1][9],
                                                        St.stage_element[St.st_num-1][10])
                                pygame.time.set_timer(START_TEXT_RESET, 2000)
                        if event.key == K_0:
                            if P1.zone == 0:
                                if P1.flash == 0:
                                    if P1.no_control == 0:
                                        serect_sound.play()
                                        P1.flash = 2
                                        P1.zone = 1
                                        P1.size['x'] = 40 if P1.size['x'] > 40 else P1.size['x']
                                        P1.size['y'] = 40 if P1.size['y'] > 40 else P1.size['y']
                                        P1.pos['x'] = (40-P1.size['y'])/2
                                        P1.pos['y'] = 240+(40-P1.size['y'])/2
                        if P1.zone == 1:
                            if event.key == K_9:
                                serect_sound.play()
                                Ifm.lives -= 1
                                Ifm_txt_lives = font1.render("残りライフ："+str(Ifm.lives), True, (0, 0, 0))
                                P1.flash = 0
                                P1.zone = 0
                                if Ifm.lives < 1:
                                    P1.zone = 2
                                P1.pos['x'] = 0
                                if St.ground_list[0] >= 0:
                                    P1.pos['y'] = 340
                                else:
                                    P1.pos['y'] = 340 + St.ground_list[0]*40
                                P1.size['x'] = St.stage_element[St.st_num-1][0]
                                P1.size['y'] = St.stage_element[St.st_num-1][1]
                                P1.no_control = 1
                            if event.key == K_RIGHT:
                                if P1.pos['x'] < 760:
                                    serect_sound.play()
                                    P1.move(40,0)
                            if event.key == K_LEFT:
                                if P1.pos['x'] >= 40:
                                    serect_sound.play()
                                    P1.move(-40,0)

                            if event.key == K_UP:
                                if P1.pos['x']//40 != 0 and St.ground_list[int(P1.pos['x']//40)] > -10 or P1.pos['x']//40 == 0 and St.ground_list[0] > 0:
                                    serect_sound.play()
                                    St.ground_list[int(P1.pos['x']/40)] -= 1
                            if event.key == K_DOWN:
                                if P1.pos['x']//40 != 0 and St.ground_list[int(P1.pos['x']//40)] < 10 or P1.pos['x']//40 == 0 and St.ground_list[0] < 9:
                                    serect_sound.play()
                                    St.ground_list[int(P1.pos['x']/40)] += 1
            if event.type == KEYUP:
                if Menu.show_YN == 1:
                    if Menu.page_num == 3:
                        if event.key == K_RETURN:
                            if Menu.VolSetting_PM_and_time[0] != 0:
                                if Menu.VolSetting_PM_and_time[1] >= 50:
                                    serect_sound.play()
                                Menu.VolSetting_PM_and_time[0] = 0
                                Menu.VolSetting_PM_and_time[1] = 0
            if event.type == MOUSEBUTTONDOWN:
                if St.next == 0:
                    if P1.zone != 3:
                        if Ifm.mouse_on_txt_killME == 1:
                            if Ifm.lives >= 1:
                                impact_sound.play()
                                P1.zone = 0
                                P1.flash_count = 0
                                P1.flash = 3
                        if Ifm.mouse_on_txt_restart == 1:
                            decision_sound.play()
                            P1.zone = 0
                            P1.flash = 0
                            P1.zone = 0
                            P1.pos['x'] = 0
                            P1.pos['y'] = 340
                            P1.vel['x'] = 0
                            P1.vel['y'] = 0
                            P1.no_control = 1
                            St.start_text = St.st_num
                            St.stage_element_process(St.stage_element[St.st_num-1][0], St.stage_element[St.st_num-1][1], 
                                                    St.stage_element[St.st_num-1][2], St.stage_element[St.st_num-1][3],
                                                    St.stage_element[St.st_num-1][4], St.stage_element[St.st_num-1][5],
                                                    St.stage_element[St.st_num-1][6], St.stage_element[St.st_num-1][7],
                                                    St.stage_element[St.st_num-1][8], St.stage_element[St.st_num-1][9],
                                                    St.stage_element[St.st_num-1][10])
                            pygame.time.set_timer(START_TEXT_RESET, 2000)
                        if St.mouse_on_up_arrow == 1:
                            serect_sound.play()
                            St.ground_list[int(P1.pos['x']/40)] -= 1
                        if St.mouse_on_down_arrow == 1:
                            serect_sound.play()
                            St.ground_list[int(P1.pos['x']/40)] += 1
                    if Ifm.mouse_on_txt_menu == 1:
                        open_menu_sound.play()
                        Menu.page_num = 0
                        Menu.show_YN = 1
                        # Ifm.mouse_on_txt_menu = 0 # show()の前に書くことを忘れずに
                    if Menu.mouse_on_cross == 1:
                        cancel_sound.play()
                        Menu.show_YN = 0
                    if Menu.mouse_on_txt_X == 1:
                        cancel_sound.play()
                        Menu.show_YN = 0
                    if Menu.mouse_on_maintxt_HowToPlay == 1:
                        serect_sound.play()
                        Menu.page_num = 1
                    if Menu.mouse_on_maintxt_SerectSt == 1:
                        serect_sound.play()
                        Menu.page_num = 2
                        Menu.SSP_pos_index = St.st_num-1
                        Menu.SSP_pos_GapY = 0
                        Menu.SSP_velY = 0
                    if Menu.mouse_on_maintxt_VolSetting == 1:
                        serect_sound.play()
                        Menu.page_num = 3
                    if Menu.mouse_on_pagetxt_SerectSt != 0:
                        if St.st_num != Menu.mouse_on_pagetxt_SerectSt:
                            decision_sound.play()
                            St.st_num = Menu.mouse_on_pagetxt_SerectSt
                            St.start_text = St.st_num
                            Ifm_txt_stage_num = font1.render("ステージ："+str(St.st_num), True, (0, 0, 0))
                            St_start_txt_1 = font3.render("ステージ："+str(St.st_num), True, (0, 0, 0))
                            Menu.show_YN = 0
                            P1.flash = 0
                            P1.zone = 0
                            P1.pos['x'] = 0
                            P1.pos['y'] = 340
                            P1.vel['x'] = 0
                            P1.vel['y'] = 0
                            P1.no_control = 1
                            St.stage_element_process(St.stage_element[St.st_num-1][0], St.stage_element[St.st_num-1][1], 
                                                    St.stage_element[St.st_num-1][2], St.stage_element[St.st_num-1][3],
                                                    St.stage_element[St.st_num-1][4], St.stage_element[St.st_num-1][5],
                                                    St.stage_element[St.st_num-1][6], St.stage_element[St.st_num-1][7],
                                                    St.stage_element[St.st_num-1][8], St.stage_element[St.st_num-1][9],
                                                    St.stage_element[St.st_num-1][10])
                            pygame.time.set_timer(START_TEXT_RESET, 2000)
                    if Menu.mouse_on_back == 1:
                        cancel_sound.play()
                        Menu.page_num = 0
                    if Menu.mouse_on_pagetxt_VolSetting_line != 0:
                        serect_sound.play()
                        Menu.VolSetting = Menu.mouse_on_pagetxt_VolSetting_line
                    elif Menu.BGM_volume > 0 and Menu.mouse_on_pagetxt_VolSetting_PlusMinus == 1:
                        Menu.VolSetting_square_cursor = 1
                        serect_sound.play()
                        Menu.VolSetting_PM_and_time[0] = 1
                    elif Menu.BGM_volume < 100 and Menu.mouse_on_pagetxt_VolSetting_PlusMinus == 2:
                        Menu.VolSetting_square_cursor = 2
                        serect_sound.play()
                        Menu.VolSetting_PM_and_time[0] = 2
                    elif Menu.SoundEffect_volume > 0 and Menu.mouse_on_pagetxt_VolSetting_PlusMinus == 3:
                        Menu.VolSetting_square_cursor = 3
                        serect_sound.play()
                        Menu.VolSetting_PM_and_time[0] = 3
                    elif Menu.SoundEffect_volume < 100 and Menu.mouse_on_pagetxt_VolSetting_PlusMinus == 4:
                        Menu.VolSetting_square_cursor = 4
                        serect_sound.play()
                        Menu.VolSetting_PM_and_time[0] = 4
            if event.type == MOUSEBUTTONUP:
                if Menu.VolSetting != 0:
                    Menu.VolSetting = 0
                    decision_sound.play()
                if Menu.VolSetting_PM_and_time[0] != 0:
                    if Menu.VolSetting_PM_and_time[1] >= 50:
                        serect_sound.play()
                    Menu.VolSetting_PM_and_time[0] = 0
                    Menu.VolSetting_PM_and_time[1] = 0
            if event.type == START_TEXT_RESET:
                St.start_text = 0

        if Menu.VolSetting == 1:
            Menu.BGM_volume = min(int((pygame.mouse.get_pos()[0]-350)/250*100), 100) if pygame.mouse.get_pos()[0] >= 350 else 0
            BGM.set_volume(Menu.BGM_volume/100)
            menu_pagetxt_VolSetting[3] = font2.render(str(Menu.BGM_volume), True, (0, 0, 0))
        elif Menu.VolSetting == 2:
            Menu.SoundEffect_volume = min(int((pygame.mouse.get_pos()[0]-350)/250*100), 100) if pygame.mouse.get_pos()[0] >= 350 else 0
            goal_sound.set_volume(Menu.SoundEffect_volume/100)
            decision_sound.set_volume(Menu.SoundEffect_volume/100)
            serect_sound.set_volume(Menu.SoundEffect_volume/100)
            open_menu_sound.set_volume(Menu.SoundEffect_volume/100)
            cancel_sound.set_volume(Menu.SoundEffect_volume/100)
            jump_sound.set_volume(Menu.SoundEffect_volume/100)
            impact_sound.set_volume(Menu.SoundEffect_volume/100)
            coin_sound.set_volume(Menu.SoundEffect_volume/100)
            menu_pagetxt_VolSetting[4] = font2.render(str(Menu.SoundEffect_volume), True, (0, 0, 0))

        if Menu.VolSetting_PM_and_time[0] != 0:
            Menu.VolSetting_PM_and_time[1] += 1
            if Menu.VolSetting_PM_and_time[1] == 1 or Menu.VolSetting_PM_and_time[1] >= 50:
                if Menu.VolSetting_PM_and_time[0] == 1 and Menu.BGM_volume > 0:
                    Menu.BGM_volume -= 1
                elif Menu.VolSetting_PM_and_time[0] == 2 and Menu.BGM_volume < 100:
                    Menu.BGM_volume += 1
                elif Menu.VolSetting_PM_and_time[0] == 3 and Menu.SoundEffect_volume > 0:
                    Menu.SoundEffect_volume -= 1
                elif Menu.VolSetting_PM_and_time[0] == 4 and Menu.SoundEffect_volume < 100:
                    Menu.SoundEffect_volume += 1
                BGM.set_volume(Menu.BGM_volume/100)
                menu_pagetxt_VolSetting[3] = font2.render(str(Menu.BGM_volume), True, (0, 0, 0))
                goal_sound.set_volume(Menu.SoundEffect_volume/100)
                decision_sound.set_volume(Menu.SoundEffect_volume/100)
                serect_sound.set_volume(Menu.SoundEffect_volume/100)
                open_menu_sound.set_volume(Menu.SoundEffect_volume/100)
                cancel_sound.set_volume(Menu.SoundEffect_volume/100)
                jump_sound.set_volume(Menu.SoundEffect_volume/100)
                impact_sound.set_volume(Menu.SoundEffect_volume/100)
                coin_sound.set_volume(Menu.SoundEffect_volume/100)
                menu_pagetxt_VolSetting[4] = font2.render(str(Menu.SoundEffect_volume), True, (0, 0, 0))

        key = pygame.key.get_pressed()
        if Menu.show_YN == 0:
            if P1.zone == 0 or P1.zone == 3:
                if P1.no_control == 0:
                    if (key[pygame.K_RIGHT] == 1 
                        and key[pygame.K_LEFT] == 0):
                        if P1.pos['x'] <= 800-(P1.size['x']//40+1)*40:
                            if (P1.pos['y'] >= 120+St.ground_list[int((P1.pos['x']+P1.size['x'])//40)]*40 
                                and P1.pos['y']+P1.size['y'] <= 400+St.ground_list[int((P1.pos['x']+P1.size['x'])//40)]*40):
                                if (P1.pos['y'] < 120+St.ground_list[int((P1.pos['x']+P1.size['x']+8)//40)]*40 
                                    or P1.pos['y']+P1.size['y'] > 400+St.ground_list[int((P1.pos['x']+P1.size['x']+8)//40)]*40):
                                    P1.move(40-(P1.pos['x']+P1.size['x'])%40,0) if P1.pos['x']%40 != 0 else P1.move(8,0)
                                else:
                                    P1.move(8,0)
                        else:
                            P1.move(8,0)
                    if (key[pygame.K_LEFT] == 1 
                        and key[pygame.K_RIGHT] == 0):
                        if P1.pos['x'] >= P1.size['x']:
                            if (P1.pos['y'] >= 120+St.ground_list[int((P1.pos['x']-1)//40)]*40 
                                and P1.pos['y']+P1.size['y'] <= 400+St.ground_list[int((P1.pos['x']-1)//40)]*40):
                                if (P1.pos['y'] < 120+St.ground_list[int((P1.pos['x']-8)//40)]*40 
                                    or P1.pos['y']+P1.size['y'] > 400+St.ground_list[int((P1.pos['x']-8)//40)]*40):
                                    P1.move(P1.pos['x']%40*-1,0)
                                else:
                                    P1.move(-8,0)
                        else:
                            P1.move(-8,0)
                    for i in range(int(((P1.pos['x']+P1.size['x'])/40-1 if (P1.pos['x']+P1.size['x'])%40 == 0 else (P1.pos['x']+P1.size['x'])//40) - P1.pos['x']//40 + 1)):
                        if (P1.pos['y'] > 120+St.ground_list[int(P1.pos['x']//40)+i]*40 
                            and P1.pos['y']+P1.size['y'] >= 400+St.ground_list[int(P1.pos['x']//40)+i]*40):
                            if key[pygame.K_UP] == 1:
                                jump_sound.play()
                                P1.move(0,P1.jump_power)


        def GoalAndNextStage(NextStageNum):
            P1.vel['x'] = 0
            A = (St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']+P1.size['x']/2)
            if A != 0:
                P1.pos['x'] += A/abs(A)
            P1.vel['y'] = 0
            B = (St.goal_pos['y']+St.goal_size['y']/2)-(P1.pos['y']+P1.size['y']/2)
            if B != 0:
                P1.pos['y'] += B/abs(B)

            if P1.size['x'] > 0:
                P1.size['x'] -= 0.75
            if P1.size['y'] > 0:
                P1.size['y'] -= 0.75

            if P1.size['x'] <= 0 and P1.size['y'] <= 0:
                if NextStageNum <= 23:
                    P1.flash = 0
                    P1.pos['x'] = 0
                    P1.pos['y'] = 340
                    P1.vel['x'] = 0
                    P1.vel['y'] = 0
                    St.next = 0
                    Menu.show_YN = 0
                    P1.no_control = 1
                    St.st_num = NextStageNum
                    St.stage_element_process(St.stage_element[St.st_num-1][0], St.stage_element[St.st_num-1][1], 
                                            St.stage_element[St.st_num-1][2], St.stage_element[St.st_num-1][3],
                                            St.stage_element[St.st_num-1][4], St.stage_element[St.st_num-1][5],
                                            St.stage_element[St.st_num-1][6], St.stage_element[St.st_num-1][7],
                                            St.stage_element[St.st_num-1][8], St.stage_element[St.st_num-1][9],
                                            St.stage_element[St.st_num-1][10])
                    St.start_text = St.st_num
                    global Ifm_txt_stage_num
                    Ifm_txt_stage_num = font1.render("ステージ："+str(St.st_num), True, (0, 0, 0))
                    global St_start_txt_1
                    St_start_txt_1 = font3.render("ステージ："+str(St.st_num), True, (0, 0, 0))
                    pygame.time.set_timer(START_TEXT_RESET, 2000)
                else:
                    St.ground_list = []
                    for i in range(20):
                        St.ground_list.append(0)
                    P1.flash = 0
                    P1.zone = 3
                    P1.size['x'] = 40
                    P1.size['y'] = 40
                    P1.pos['x'] = 380
                    P1.pos['y'] = 340
                    P1.vel['x'] = 0
                    P1.vel['y'] = 0
                    St.next = 0
                    Menu.show_YN = 0
                    P1.no_control = 1

        St.next = 0
        if St.coin_count == St.coin_num:
            if P1.pos['x'] <= St.goal_pos['x']+St.goal_size['x']/2 <= P1.pos['x']+P1.size['x']:
                if (St.goal_pos['y'] < P1.pos['y'] < St.goal_pos['y']+St.goal_size['y'] 
                    or St.goal_pos['y'] < P1.pos['y']+P1.size['y'] < St.goal_pos['y']+St.goal_size['y']):
                    St.next = 1
            if P1.pos['y'] <= St.goal_pos['y']+St.goal_size['y']/2 <= P1.pos['y']+P1.size['y']:
                if (St.goal_pos['x'] < P1.pos['x'] < St.goal_pos['x']+St.goal_size['x'] 
                    or St.goal_pos['x'] < P1.pos['x']+P1.size['x'] < St.goal_pos['x']+St.goal_size['x']):
                    St.next = 1
            if ((((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']))**2+((St.goal_pos['y']+5.5)-(P1.pos['y']))**2)**0.5 
                + (((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']))**2+((St.goal_pos['y']+74.5)-(P1.pos['y']))**2)**0.5 
                < 79):
                St.next = 1
            elif ((((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']+P1.size['x']))**2+((St.goal_pos['y']+5.5)-(P1.pos['y']))**2)**0.5 
                + (((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']+P1.size['x']))**2+((St.goal_pos['y']+74.5)-(P1.pos['y']))**2)**0.5 
                < 79):
                St.next = 1
            elif ((((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']))**2+((St.goal_pos['y']+5.5)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                + (((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']))**2+((St.goal_pos['y']+74.5)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                < 79):
                St.next = 1
            elif ((((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']+P1.size['x']))**2+((St.goal_pos['y']+5.5)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                + (((St.goal_pos['x']+St.goal_size['x']/2)-(P1.pos['x']+P1.size['x']))**2+((St.goal_pos['y']+74.5)-(P1.pos['y']+P1.size['y']))**2)**0.5 
                < 79):
                St.next = 1
        if St.next == 1:
            if St.coin_count == St.coin_num:
                if P1.size['x'] == St.stage_element[St.st_num-1][0] and P1.size['y'] == St.stage_element[St.st_num-1][1]:
                    goal_sound.play()
                P1.no_control = 1
                GoalAndNextStage(St.st_num + 1)


        pygame.display.update()
        clock.tick(90)
main()
